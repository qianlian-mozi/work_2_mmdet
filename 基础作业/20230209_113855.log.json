{"env_info": "sys.platform: win32\nPython: 3.9.0 (default, Nov 15 2020, 08:30:55) [MSC v.1916 64 bit (AMD64)]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 2060\nCUDA_HOME: D:\\Anaconda\\envs\\py39\nNVCC: Cuda compilation tools, release 11.7, V11.7.99\nMSVC: \u7528\u4e8e x64 \u7684 Microsoft (R) C/C++ \u4f18\u5316\u7f16\u8bd1\u5668 19.29.30139 \u7248\nGCC: n/a\nPyTorch: 1.13.1\nPyTorch compiling details: PyTorch built with:\n  - C++ Version: 199711\n  - MSVC 192829337\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 2019\n  - LAPACK is enabled (usually provided by MKL)\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.7\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.5\n  - Magma 2.5.4\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/cb/pytorch_1000000000000/work/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.1\nOpenCV: 4.7.0\nMMCV: 1.7.0\nMMCV Compiler: MSVC 192829924\nMMCV CUDA Compiler: 11.7\nMMDetection: 2.28.0+", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=None),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'balloon/'\nCLASSES = ('balloon', )\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='balloon/train/coco.json',\n        img_prefix='balloon/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='balloon/val/coco.json',\n        img_prefix='balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='balloon/val/coco.json',\n        img_prefix='balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.001, momentum=0.8, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=3,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=16)\ncheckpoint_config = dict(interval=4)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'mask_rcnn_r50_fpn_fp16_1x_coco_20200205-59faf7e4.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nfp16 = dict(loss_scale=512.0)\nwork_dir = './work_dirs\\mask_rcnn_r50_fpn_fp16_1x_coco'\nauto_resume = False\ngpu_ids = range(0, 1)\n", "seed": 1057436950, "exp_name": "mask_rcnn_r50_fpn_fp16_1x_coco.py"}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 0.001, "bbox_mAP": 0.5394, "bbox_mAP_50": 0.6871, "bbox_mAP_75": 0.6466, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4372, "bbox_mAP_l": 0.6253, "bbox_mAP_copypaste": "0.5394 0.6871 0.6466 0.0000 0.4372 0.6253", "segm_mAP": 0.6137, "segm_mAP_50": 0.6821, "segm_mAP_75": 0.6766, "segm_mAP_s": 0.0025, "segm_mAP_m": 0.3987, "segm_mAP_l": 0.7165, "segm_mAP_copypaste": "0.6137 0.6821 0.6766 0.0025 0.3987 0.7165"}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.001, "bbox_mAP": 0.5977, "bbox_mAP_50": 0.7662, "bbox_mAP_75": 0.7261, "bbox_mAP_s": 0.012, "bbox_mAP_m": 0.4566, "bbox_mAP_l": 0.6731, "bbox_mAP_copypaste": "0.5977 0.7662 0.7261 0.0120 0.4566 0.6731", "segm_mAP": 0.6957, "segm_mAP_50": 0.7625, "segm_mAP_75": 0.7559, "segm_mAP_s": 0.0126, "segm_mAP_m": 0.5402, "segm_mAP_l": 0.78, "segm_mAP_copypaste": "0.6957 0.7625 0.7559 0.0126 0.5402 0.7800"}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.001, "bbox_mAP": 0.6672, "bbox_mAP_50": 0.8175, "bbox_mAP_75": 0.7764, "bbox_mAP_s": 0.0402, "bbox_mAP_m": 0.5423, "bbox_mAP_l": 0.742, "bbox_mAP_copypaste": "0.6672 0.8175 0.7764 0.0402 0.5423 0.7420", "segm_mAP": 0.7368, "segm_mAP_50": 0.8246, "segm_mAP_75": 0.7983, "segm_mAP_s": 0.0273, "segm_mAP_m": 0.574, "segm_mAP_l": 0.8243, "segm_mAP_copypaste": "0.7368 0.8246 0.7983 0.0273 0.5740 0.8243"}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.001, "bbox_mAP": 0.6942, "bbox_mAP_50": 0.8476, "bbox_mAP_75": 0.8082, "bbox_mAP_s": 0.0434, "bbox_mAP_m": 0.5077, "bbox_mAP_l": 0.7772, "bbox_mAP_copypaste": "0.6942 0.8476 0.8082 0.0434 0.5077 0.7772", "segm_mAP": 0.7612, "segm_mAP_50": 0.8296, "segm_mAP_75": 0.8217, "segm_mAP_s": 0.03, "segm_mAP_m": 0.5245, "segm_mAP_l": 0.8559, "segm_mAP_copypaste": "0.7612 0.8296 0.8217 0.0300 0.5245 0.8559"}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.001, "bbox_mAP": 0.7084, "bbox_mAP_50": 0.8622, "bbox_mAP_75": 0.7997, "bbox_mAP_s": 0.0289, "bbox_mAP_m": 0.5376, "bbox_mAP_l": 0.7888, "bbox_mAP_copypaste": "0.7084 0.8622 0.7997 0.0289 0.5376 0.7888", "segm_mAP": 0.7733, "segm_mAP_50": 0.8468, "segm_mAP_75": 0.82, "segm_mAP_s": 0.0138, "segm_mAP_m": 0.5678, "segm_mAP_l": 0.8611, "segm_mAP_copypaste": "0.7733 0.8468 0.8200 0.0138 0.5678 0.8611"}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.001, "bbox_mAP": 0.7281, "bbox_mAP_50": 0.8649, "bbox_mAP_75": 0.836, "bbox_mAP_s": 0.0337, "bbox_mAP_m": 0.5522, "bbox_mAP_l": 0.8088, "bbox_mAP_copypaste": "0.7281 0.8649 0.8360 0.0337 0.5522 0.8088", "segm_mAP": 0.7718, "segm_mAP_50": 0.848, "segm_mAP_75": 0.836, "segm_mAP_s": 0.0138, "segm_mAP_m": 0.5384, "segm_mAP_l": 0.8594, "segm_mAP_copypaste": "0.7718 0.8480 0.8360 0.0138 0.5384 0.8594"}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.001, "bbox_mAP": 0.7235, "bbox_mAP_50": 0.8584, "bbox_mAP_75": 0.8106, "bbox_mAP_s": 0.0505, "bbox_mAP_m": 0.5273, "bbox_mAP_l": 0.8116, "bbox_mAP_copypaste": "0.7235 0.8584 0.8106 0.0505 0.5273 0.8116", "segm_mAP": 0.7645, "segm_mAP_50": 0.8642, "segm_mAP_75": 0.8288, "segm_mAP_s": 0.0168, "segm_mAP_m": 0.5145, "segm_mAP_l": 0.8595, "segm_mAP_copypaste": "0.7645 0.8642 0.8288 0.0168 0.5145 0.8595"}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.001, "bbox_mAP": 0.7452, "bbox_mAP_50": 0.8706, "bbox_mAP_75": 0.8387, "bbox_mAP_s": 0.0505, "bbox_mAP_m": 0.588, "bbox_mAP_l": 0.8209, "bbox_mAP_copypaste": "0.7452 0.8706 0.8387 0.0505 0.5880 0.8209", "segm_mAP": 0.7797, "segm_mAP_50": 0.8706, "segm_mAP_75": 0.8387, "segm_mAP_s": 0.0168, "segm_mAP_m": 0.5389, "segm_mAP_l": 0.866, "segm_mAP_copypaste": "0.7797 0.8706 0.8387 0.0168 0.5389 0.8660"}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 0.0001, "bbox_mAP": 0.7316, "bbox_mAP_50": 0.86, "bbox_mAP_75": 0.8352, "bbox_mAP_s": 0.0757, "bbox_mAP_m": 0.5523, "bbox_mAP_l": 0.8143, "bbox_mAP_copypaste": "0.7316 0.8600 0.8352 0.0757 0.5523 0.8143", "segm_mAP": 0.7713, "segm_mAP_50": 0.8659, "segm_mAP_75": 0.8284, "segm_mAP_s": 0.0224, "segm_mAP_m": 0.5187, "segm_mAP_l": 0.8665, "segm_mAP_copypaste": "0.7713 0.8659 0.8284 0.0224 0.5187 0.8665"}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 0.0001, "bbox_mAP": 0.7371, "bbox_mAP_50": 0.8595, "bbox_mAP_75": 0.8347, "bbox_mAP_s": 0.0757, "bbox_mAP_m": 0.5695, "bbox_mAP_l": 0.8192, "bbox_mAP_copypaste": "0.7371 0.8595 0.8347 0.0757 0.5695 0.8192", "segm_mAP": 0.7702, "segm_mAP_50": 0.8654, "segm_mAP_75": 0.8279, "segm_mAP_s": 0.0168, "segm_mAP_m": 0.5187, "segm_mAP_l": 0.866, "segm_mAP_copypaste": "0.7702 0.8654 0.8279 0.0168 0.5187 0.8660"}
{"mode": "val", "epoch": 11, "iter": 13, "lr": 0.0001, "bbox_mAP": 0.7439, "bbox_mAP_50": 0.871, "bbox_mAP_75": 0.846, "bbox_mAP_s": 0.101, "bbox_mAP_m": 0.592, "bbox_mAP_l": 0.8159, "bbox_mAP_copypaste": "0.7439 0.8710 0.8460 0.1010 0.5920 0.8159", "segm_mAP": 0.7794, "segm_mAP_50": 0.871, "segm_mAP_75": 0.839, "segm_mAP_s": 0.0252, "segm_mAP_m": 0.5374, "segm_mAP_l": 0.8665, "segm_mAP_copypaste": "0.7794 0.8710 0.8390 0.0252 0.5374 0.8665"}
{"mode": "val", "epoch": 12, "iter": 13, "lr": 1e-05, "bbox_mAP": 0.744, "bbox_mAP_50": 0.8711, "bbox_mAP_75": 0.8461, "bbox_mAP_s": 0.101, "bbox_mAP_m": 0.592, "bbox_mAP_l": 0.8159, "bbox_mAP_copypaste": "0.7440 0.8711 0.8461 0.1010 0.5920 0.8159", "segm_mAP": 0.7788, "segm_mAP_50": 0.8711, "segm_mAP_75": 0.839, "segm_mAP_s": 0.0189, "segm_mAP_m": 0.5374, "segm_mAP_l": 0.8665, "segm_mAP_copypaste": "0.7788 0.8711 0.8390 0.0189 0.5374 0.8665"}
{"mode": "val", "epoch": 13, "iter": 13, "lr": 1e-05, "bbox_mAP": 0.7486, "bbox_mAP_50": 0.8708, "bbox_mAP_75": 0.8458, "bbox_mAP_s": 0.101, "bbox_mAP_m": 0.592, "bbox_mAP_l": 0.8216, "bbox_mAP_copypaste": "0.7486 0.8708 0.8458 0.1010 0.5920 0.8216", "segm_mAP": 0.7793, "segm_mAP_50": 0.8708, "segm_mAP_75": 0.8388, "segm_mAP_s": 0.0252, "segm_mAP_m": 0.5374, "segm_mAP_l": 0.866, "segm_mAP_copypaste": "0.7793 0.8708 0.8388 0.0252 0.5374 0.8660"}
{"mode": "val", "epoch": 14, "iter": 13, "lr": 1e-05, "bbox_mAP": 0.7517, "bbox_mAP_50": 0.8708, "bbox_mAP_75": 0.8458, "bbox_mAP_s": 0.101, "bbox_mAP_m": 0.592, "bbox_mAP_l": 0.826, "bbox_mAP_copypaste": "0.7517 0.8708 0.8458 0.1010 0.5920 0.8260", "segm_mAP": 0.7793, "segm_mAP_50": 0.8708, "segm_mAP_75": 0.8388, "segm_mAP_s": 0.0252, "segm_mAP_m": 0.5374, "segm_mAP_l": 0.866, "segm_mAP_copypaste": "0.7793 0.8708 0.8388 0.0252 0.5374 0.8660"}
{"mode": "val", "epoch": 15, "iter": 13, "lr": 1e-05, "bbox_mAP": 0.7524, "bbox_mAP_50": 0.8728, "bbox_mAP_75": 0.8467, "bbox_mAP_s": 0.101, "bbox_mAP_m": 0.5996, "bbox_mAP_l": 0.8265, "bbox_mAP_copypaste": "0.7524 0.8728 0.8467 0.1010 0.5996 0.8265", "segm_mAP": 0.7798, "segm_mAP_50": 0.8728, "segm_mAP_75": 0.8397, "segm_mAP_s": 0.0252, "segm_mAP_m": 0.5442, "segm_mAP_l": 0.8665, "segm_mAP_copypaste": "0.7798 0.8728 0.8397 0.0252 0.5442 0.8665"}
{"mode": "val", "epoch": 16, "iter": 13, "lr": 1e-05, "bbox_mAP": 0.752, "bbox_mAP_50": 0.8711, "bbox_mAP_75": 0.8461, "bbox_mAP_s": 0.1515, "bbox_mAP_m": 0.592, "bbox_mAP_l": 0.8265, "bbox_mAP_copypaste": "0.7520 0.8711 0.8461 0.1515 0.5920 0.8265", "segm_mAP": 0.7795, "segm_mAP_50": 0.8711, "segm_mAP_75": 0.839, "segm_mAP_s": 0.0289, "segm_mAP_m": 0.5374, "segm_mAP_l": 0.8665, "segm_mAP_copypaste": "0.7795 0.8711 0.8390 0.0289 0.5374 0.8665"}
